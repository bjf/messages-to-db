#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawTextHelpFormatter
import json
from datetime                           import datetime
from lib.message_handler                import MessageHandler
from lib.std                            import pre, prej

class MsgHandler(MessageHandler):
    def __init__(self):
        super(MsgHandler, self).__init__(archive_messages=False)

def to_date(ts):
    return datetime.strptime(ts, "%A, %d. %B %Y %H:%M %Z")


if __name__ == '__main__':
    app_description = '''Count how many kernels each person cranked in a cycle.
    '''
    app_epilog = '''
Examples:
    ./wip
    '''
    help_msgs = '''A json file of messages to be processed.'''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawTextHelpFormatter)
    parser.add_argument('msgs', nargs='?', help=help_msgs)
    args = parser.parse_args()

    msgs = {}
    total = 0
    mh = MsgHandler()
    try:
        with open(args.msgs, 'r') as fid:
            while fid:
                line = fid.readline()
                if line != '':
                    msg = json.loads(line)
                    # mh.handle(msg)
                    total += 1
                    # prej(msg)
                    try:
                        jn = msg['test-job-name']
                        key = f'{msg["series_version"]}:{msg["kernel-package"]}:{msg["kernel-version"]}:{msg["cloud"]}:{msg["instance-type"]}'
                        ts  = msg["timestamp"]
                        op  = msg["op"]
                    except KeyError:
                        if msg['op'] in ['jobs.created']:
                            continue
                        prej(msg)
                        raise

                    msgs.setdefault(jn, {})
                    msgs[jn].setdefault(key, {})

                    msgs[jn][key].setdefault('timestamps', {})
                    msgs[jn][key]['timestamps'][op] = ts
                    if op == 'sut.testing.completed':
                        prej(msg)
                        break
                    if total == 10000:
                        break
        # prej(msgs)

    except json.decoder.JSONDecodeError:
        # Probably a empty string
        pass

    pre(f'{total} messages processed')
